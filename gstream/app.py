from flask import Flask, render_template, jsonify
from zipfile import ZipFile
from boto3.dynamodb.conditions import Key, Attr
import datetime, boto3, botocore, os

DUTY_STATIONS = {
    'NY':('NY','New York'),
    'GE':('GE','Geneva')
}

app = Flask(__name__)

'''
stuff to do:
1. Get files and metadata from gDoc and store those in S3 with entries to query from DDB
   (S3 path format according to first doc symbol? e.g., <bucket>/A/73/???/<filename.pdf>)
   (What happens when a new file comes out?)
2. Serve a daily list of new issues and updates/reissues.
   (things we need to know: was English reissued? does the record contain English file?)
3. Serve some statistics... 
'''

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/ds/', defaults={'duty_station':'NY', 'query_date':datetime.date.today().__str__()})
@app.route('/ds/<duty_station>/', defaults={'query_date':datetime.date.today().__str__()})
@app.route('/ds/<duty_station>/<query_date>')
def station(duty_station, query_date):
    '''
    All of this data will come from a DB. A separate function will handle updates from gDoc.
    '''
    errors = []

    try:
        this_ds = DUTY_STATIONS[duty_station]
    except KeyError:
        errors.append("Invalid duty station selection. Defaults applied.")
        this_ds = DUTY_STATIONS['NY']

    try:
        this_date = query_date
        datetime.datetime.strptime(this_date, '%Y-%m-%d')
    except ValueError:
        errors.append("Incorrect date format. Defaults applied.")
        this_date = datetime.date.today().__str__()

    # We have enough valid data now to query DDB
    return render_template('dutystation.html', errors=errors)

@app.route('/symbol/', defaults={'search_string': ''})
@app.route('/symbol/<path:search_string>')
def symbol(search_string):
    '''
    We want to be able to get the metadata/file history for a particular symbol or the matches
    generated by a partial symbol search. We also want to know if it's in the UNDL already, 
    and which files are already attached.
    '''
    return render_template('symbol.html')


@app.route('/update')
def update():
    '''
    This is not intended to be run in a web browser, so we don't want to return a template.

    It should query gDoc for a date range based on the last successful run (stored in the database)
    Then it should process the results to determine if a file/metadata combo is a) something new, 
    b) something reissued, or c) something it's already seen 

    Things we want to know from the incoming files and metadata include md5 file checksums, release dates, etc

    Store files in S3 in a path determined by symbol, e.g., S/2010/10 would be in:
    <bucket>/S/2010/10/<original_filname>-<md5sum>.pdf

    We also probably don't want people to arbitrarily run this, so perhaps it should be walled off.
    '''
    result = 'foo'
    return jsonify(result)